#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var express = require("express")
 var app = require('../app');
 var app2 = express();
 var debug = require('debug')('homework:server');
 var fs = require('fs');
 var path = require('path');
 var https = require('https');
 var http = require('http');
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000' || 443);
 app.set('port', port);
 //app.use(express.static(__dirname , '/public'));

 app2.get("*", (req, res, next) => {
  console.log("req.secure == " + req.secure);
  
  if(req.secure){
      // --- https
      next();
  }else{
      // -- http
      let to = "https://" + req.headers.host + req.url;
      console.log("to ==> " + to);

      return res.redirect("https://" + req.headers.host + req.url);
  }
})
 
 /**
  * Create HTTP server.
  */
 
try {
  const option = {
    ca: fs.readFileSync('/etc/letsencrypt/live/qmarket.me/fullchain.pem'),
    key: fs.readFileSync(path.resolve(process.cwd(), '/etc/letsencrypt/live/qmarket.me/privkey.pem'), 'utf8').toString(),
    cert: fs.readFileSync(path.resolve(process.cwd(), '/etc/letsencrypt/live/qmarket.me/cert.pem'), 'utf8').toString(),
  };
  
  https.createServer(option, app).listen(443, () => {
    console.log(`[HTTPS] qmarket Server is started on port ${443}}`);
  });
  http.createServer(app2).listen(80,()=> {
    console.log(`[HTTP] qmarket Server is started on port ${80}}`);
  })
} catch (error) {
  console.error('[HTTPS] HTTPS 오류가 발생하였습니다. HTTPS 서버는 실행되지 않습니다.');
  console.warn(error);
}
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
//  server.listen(port);
//  server.on('error', onError);
//  server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 
